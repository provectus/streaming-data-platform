{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Fast Data Solution Cloudformation template",
  "Metadata": {
    "Authors": {
      "Description": "German Osin (gosin@provectus.com)"
    },
    "License": {
      "Description": "Some Licence."
    }
  },
  "Parameters": {
    "FDSServicePrefix": {
      "Type": "String",
      "Default": "fdsanalytics"
    },
    "FDSAnalyticalDatabaseName": {
      "Type": "String",
      "Default": "fdsanalytics"
    },
    "FDSS3Bucket": {
      "Type": "String",
      "Default": "fdsanalytics"
    }
  },
  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "BucketName": {
          "Ref": "FDSS3Bucket"
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Function": {
                "Fn::GetAtt": [
                  "JsonToParquetLambda",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "FDSServicePrefix"
                  },
                  "KinesisPermission"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "kinesis",
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:PutRecord",
                    "kinesis:ListStreams",
                    "kinesis:PutRecords"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "firehose",
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:PutRecord",
                    "kinesis:ListStreams",
                    "kinesis:PutRecords"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "KinesisAnalyticsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "kinesisanalytics.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "firehose.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "FDSServicePrefix"
                  },
                  "KinesisAnalyticsPermission"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Sid": "ReadInputStream",
                  "Action": [
                    "kinesis:ListShards",
                    "kinesis:ListStreams",
                    "kinesis:DescribeLimits",
                    "kinesis:DescribeStream",
                    "kinesis:DescribeStreamConsumer",
                    "kinesis:DescribeStreamSummary",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:ListTagsForStream",
                    "kinesis:SubscribeToShard",
                    "kinesis:AddTagsToStream",
                    "kinesis:CreateStream",
                    "kinesis:DecreaseStreamRetentionPeriod",
                    "kinesis:DeleteStream",
                    "kinesis:DeregisterStreamConsumer",
                    "kinesis:DisableEnhancedMonitoring",
                    "kinesis:EnableEnhancedMonitoring",
                    "kinesis:IncreaseStreamRetentionPeriod",
                    "kinesis:MergeShards",
                    "kinesis:PutRecord",
                    "kinesis:PutRecords",
                    "kinesis:RegisterStreamConsumer",
                    "kinesis:RemoveTagsFromStream",
                    "kinesis:SplitShard",
                    "kinesis:UpdateShardCount"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "BcnsStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "bcns"
            ]
          ]
        },
        "ShardCount": 2
      }
    },
    "ClickStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "clicks"
            ]
          ]
        },
        "ShardCount": 2
      }
    },
    "ImpressionsStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "impressions"
            ]
          ]
        },
        "ShardCount": 2
      }
    },
    "AggregatesStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "aggregates"
            ]
          ]
        },
        "ShardCount": 2
      }
    },
    "FDSApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "FDS_API"
            ]
          ]
        },
        "Description": "API used for FDS requests",
        "FailOnWarnings": false
      }
    },
    "ImpressionBcnLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "./fds-lambda-api/target/fds-lambda-api-1.0-SNAPSHOT.jar",
        "FunctionName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "ImpressionBcnStore"
            ]
          ]
        },
        "Handler": "com.provectus.fds.api.ImpressionBcnHandler",
        "MemorySize": 128,
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "java8"
      }
    },
    "ImpressionBcnLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ImpressionBcnLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "FDSApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ImpressionBcnResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "FDSApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "FDSApi",
            "RootResourceId"
          ]
        },
        "PathPart": "impressions"
      }
    },
    "ImpressionBcnRequest": {
      "DependsOn": "ImpressionBcnLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ImpressionBcnLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
        "RequestParameters": {
          "method.request.querystring.name": true
        },
        "ResourceId": {
          "Ref": "ImpressionBcnResource"
        },
        "RestApiId": {
          "Ref": "FDSApi"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    },
    "ClickBcnLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "./fds-lambda-api/target/fds-lambda-api-1.0-SNAPSHOT.jar",
        "FunctionName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "ClickBcnStore"
            ]
          ]
        },
        "Handler": "com.provectus.fds.api.ClickBcnHandler",
        "MemorySize": 128,
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "java8"
      }
    },
    "ClickBcnLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClickBcnLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "FDSApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "ClickBcnResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "FDSApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "FDSApi",
            "RootResourceId"
          ]
        },
        "PathPart": "clicks"
      }
    },
    "ClickBcnRequest": {
      "DependsOn": "ClickBcnLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ClickBcnLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
        "RequestParameters": {
          "method.request.querystring.name": true
        },
        "ResourceId": {
          "Ref": "ClickBcnResource"
        },
        "RestApiId": {
          "Ref": "FDSApi"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    },
    "BidBcnLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "./fds-lambda-api/target/fds-lambda-api-1.0-SNAPSHOT.jar",
        "FunctionName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "BidBcnStore"
            ]
          ]
        },
        "Handler": "com.provectus.fds.api.BidBcnHandler",
        "MemorySize": 128,
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "java8"
      }
    },
    "BidBcnLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BidBcnLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "FDSApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "BidBcnResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "FDSApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "FDSApi",
            "RootResourceId"
          ]
        },
        "PathPart": "bids"
      }
    },
    "BidBcnRequest": {
      "DependsOn": "BidBcnLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BidBcnLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
        "RequestParameters": {
          "method.request.querystring.name": true
        },
        "ResourceId": {
          "Ref": "BidBcnResource"
        },
        "RestApiId": {
          "Ref": "FDSApi"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    },
    "KinesisAnalyticsApp": {
      "Type": "AWS::KinesisAnalytics::Application",
      "Properties": {
        "ApplicationName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "FDSApplication"
            ]
          ]
        },
        "ApplicationDescription": "Joining & Aggregation app",
        "ApplicationCode": {
          "Fn::Join": [
            "\n",
            [
              "CREATE STREAM \"bcns_impressions\" (",
              "                \"txid\" VARCHAR(64),",
              "                \"event_timestamp\" BIGINT,",
              "                \"win_price\" BIGINT",
              ");",
              "",
              "CREATE OR REPLACE PUMP \"bcns_impressions_pump\" AS",
              "INSERT INTO \"bcns_impressions\" (\"txid\",\"event_timestamp\",\"win_price\") ",
              "  SELECT \"txid\",\"event_timestamp\",\"win_price\" FROM \"bcns_001\" WHERE \"type\"='imp';",
              "",
              "CREATE STREAM \"bcns_bids\" (",
              "                \"txid\" VARCHAR(64),",
              "                \"event_timestamp\" BIGINT,",
              "                \"campaign_item_id\" BIGINT,",
              "                \"domain\" VARCHAR(255),",
              "                \"creative_id\" VARCHAR(255),",
              "                \"creative_category\" VARCHAR(255),",
              "                \"appuid\" VARCHAR(255)",
              ");",
              "",
              "CREATE OR REPLACE PUMP \"bcns_bids_pump\" AS",
              "INSERT INTO \"bcns_bids\" (\"txid\",\"campaign_item_id\",\"domain\",\"creative_id\",\"creative_category\",\"appuid\",\"event_timestamp\") ",
              "  SELECT \"txid\",\"campaign_item_id\",\"domain\",\"creative_id\",\"creative_category\",\"appuid\",\"event_timestamp\" FROM \"bcns_001\" WHERE \"type\"='bid';",
              "",
              "",
              "CREATE STREAM \"bcns_clicks\" (",
              "                \"txid\" VARCHAR(64),",
              "                \"event_timestamp\" BIGINT",
              ");",
              "",
              "",
              "CREATE OR REPLACE PUMP \"bcns_clicks_pump\" AS",
              "INSERT INTO \"bcns_clicks\" (\"txid\",\"event_timestamp\") ",
              "  SELECT \"txid\",\"event_timestamp\" FROM \"bcns_001\" WHERE \"type\"='click';",
              "",
              "",
              "CREATE STREAM \"impressions\"(",
              "                \"txid\" VARCHAR(64),",
              "                \"event_timestamp\" BIGINT,",
              "                \"campaign_item_id\" BIGINT,",
              "                \"domain\" VARCHAR(255),",
              "                \"creative_id\" VARCHAR(255),",
              "                \"creative_category\" VARCHAR(255),",
              "                \"appuid\" VARCHAR(255)",
              ");",
              "",
              "",
              "CREATE OR REPLACE PUMP \"impressions_pump\" AS",
              "INSERT INTO \"impressions\" ( \"txid\", \"event_timestamp\", \"campaign_item_id\", \"domain\", \"creative_id\", \"creative_category\", \"appuid\")",
              "SELECT STREAM ",
              " b.\"txid\", i.\"event_timestamp\", b.\"campaign_item_id\", b.\"domain\", b.\"creative_id\", b.\"creative_category\", b.\"appuid\"",
              " FROM \"bcns_bids\" OVER (RANGE INTERVAL '1' MINUTE PRECEDING) as b",
              " JOIN \"bcns_impressions\" AS i ON (b.\"txid\"=i.\"txid\");",
              "",
              "CREATE STREAM \"clicks\"(",
              "                \"txid\" VARCHAR(16),",
              "                \"event_timestamp\" BIGINT,",
              "                \"campaign_item_id\" BIGINT,",
              "                \"domain\" VARCHAR(255),",
              "                \"creative_id\" VARCHAR(255),",
              "                \"creative_category\" VARCHAR(255),",
              "                \"appuid\" VARCHAR(255)",
              ");",
              "",
              "CREATE OR REPLACE PUMP \"clicks_pump\" AS",
              "INSERT INTO \"clicks\" ( \"txid\", \"event_timestamp\", \"campaign_item_id\", \"domain\", \"creative_id\", \"creative_category\", \"appuid\")",
              "SELECT STREAM ",
              " i.\"txid\", c.\"event_timestamp\", i.\"campaign_item_id\", i.\"domain\", i.\"creative_id\", i.\"creative_category\", i.\"appuid\"",
              " FROM \"impressions\" OVER (RANGE INTERVAL '5' MINUTE PRECEDING) as i",
              " JOIN \"bcns_clicks\" AS c ON (i.\"txid\"=c.\"txid\");",
              "",
              "",
              "CREATE STREAM \"campaign_aggregates\"(",
              "               \"campaign_item_id\" BIGINT,",
              "               \"period\" TIMESTAMP,",
              "                \"bids\" BIGINT,",
              "                \"imps\" BIGINT,",
              "                \"clicks\" BIGINT);",
              "",
              "CREATE OR REPLACE PUMP \"campaign_item_performance_bids_pump\" AS",
              "INSERT INTO \"campaign_aggregates\" (\"campaign_item_id\",\"period\",\"bids\") ",
              "SELECT STREAM \"campaign_item_id\", ",
              "              STEP(\"bcns_bids\".ROWTIME BY INTERVAL '10' MINUTE) as \"period\",",
              "              count(*) as \"bids\"",
              "FROM \"bcns_bids\"",
              "GROUP BY \"campaign_item_id\", STEP(\"bcns_bids\".ROWTIME BY INTERVAL '10' MINUTE);",
              "",
              "",
              "",
              "CREATE OR REPLACE PUMP \"campaign_item_performance_imps_pump\" AS",
              "INSERT INTO \"campaign_aggregates\" (\"campaign_item_id\", \"period\", \"imps\") ",
              "SELECT STREAM \"campaign_item_id\",",
              "              STEP(\"impressions\".ROWTIME BY INTERVAL '10' MINUTE) as \"period\",",
              "              count(1) as \"imps\"",
              "FROM \"impressions\"",
              "GROUP BY \"campaign_item_id\", STEP(\"impressions\".ROWTIME BY INTERVAL '10' MINUTE);",
              "",
              "",
              "",
              "CREATE OR REPLACE PUMP \"campaign_item_performance_clicks_pump\" AS",
              "INSERT INTO \"campaign_aggregates\" (\"campaign_item_id\", \"period\", \"clicks\") ",
              "SELECT STREAM \"campaign_item_id\",",
              "              STEP(\"clicks\".ROWTIME BY INTERVAL '10' MINUTE) as \"period\",",
              "              count(1) as \"clicks\"",
              "FROM \"clicks\"",
              "GROUP BY \"campaign_item_id\", STEP(\"clicks\".ROWTIME BY INTERVAL '10' MINUTE);"
            ]
          ]
        },
        "Inputs": [
          {
            "KinesisStreamsInput": {
              "ResourceARN": {
                "Fn::GetAtt": [
                  "BcnsStream",
                  "Arn"
                ]
              },
              "RoleARN": {
                "Fn::GetAtt": [
                  "KinesisAnalyticsRole",
                  "Arn"
                ]
              }
            },
            "NamePrefix": "bcns",
            "InputSchema": {
              "RecordColumns": [
                {
                  "Name": "txid",
                  "SqlType": "VARCHAR(64)",
                  "Mapping": "$.txid"
                },
                {
                  "Name": "campaign_item_id",
                  "SqlType": "BIGINT",
                  "Mapping": "$.campaign_item_id"
                },
                {
                  "Name": "domain",
                  "SqlType": "VARCHAR(255)",
                  "Mapping": "$.domain"
                },
                {
                  "Name": "creative_id",
                  "SqlType": "VARCHAR(255)",
                  "Mapping": "$.creative_id"
                },
                {
                  "Name": "appuid",
                  "SqlType": "VARCHAR(255)",
                  "Mapping": "$.appuid"
                },
                {
                  "Name": "creative_category",
                  "SqlType": "VARCHAR(255)",
                  "Mapping": "$.creative_category"
                },
                {
                  "Name": "type",
                  "SqlType": "VARCHAR(16)",
                  "Mapping": "$.type"
                },
                {
                  "Name": "event_timestamp",
                  "SqlType": "BIGINT",
                  "Mapping": "$.timestamp"
                },
                {
                  "Name": "win_price",
                  "SqlType": "BIGINT",
                  "Mapping": "$.win_price"
                }
              ],
              "RecordEncoding": "UTF-8",
              "RecordFormat": {
                "RecordFormatType": "JSON",
                "MappingParameters": {
                  "JSONMappingParameters": {
                    "RecordRowPath": "$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "KinesisAnalyticsAppClicksOutputs": {
      "Type": "AWS::KinesisAnalytics::ApplicationOutput",
      "DependsOn": "KinesisAnalyticsApp",
      "Properties": {
        "ApplicationName": {
          "Ref": "KinesisAnalyticsApp"
        },
        "Output": {
          "Name": "clicks",
          "DestinationSchema": {
            "RecordFormatType": "JSON"
          },
          "KinesisStreamsOutput": {
            "ResourceARN": {
              "Fn::GetAtt": [
                "ClickStream",
                "Arn"
              ]
            },
            "RoleARN": {
              "Fn::GetAtt": [
                "KinesisAnalyticsRole",
                "Arn"
              ]
            }
          }
        }
      }
    },
    "KinesisAnalyticsAppImpsOutputs": {
      "Type": "AWS::KinesisAnalytics::ApplicationOutput",
      "DependsOn": "KinesisAnalyticsApp",
      "Properties": {
        "ApplicationName": {
          "Ref": "KinesisAnalyticsApp"
        },
        "Output": {
          "Name": "impressions",
          "DestinationSchema": {
            "RecordFormatType": "JSON"
          },
          "KinesisStreamsOutput": {
            "ResourceARN": {
              "Fn::GetAtt": [
                "ImpressionsStream",
                "Arn"
              ]
            },
            "RoleARN": {
              "Fn::GetAtt": [
                "KinesisAnalyticsRole",
                "Arn"
              ]
            }
          }
        }
      }
    },
    "KinesisAnalyticsAggregatesAppOutputs": {
      "Type": "AWS::KinesisAnalytics::ApplicationOutput",
      "DependsOn": "KinesisAnalyticsApp",
      "Properties": {
        "ApplicationName": {
          "Ref": "KinesisAnalyticsApp"
        },
        "Output": {
          "Name": "campaign_aggregates",
          "DestinationSchema": {
            "RecordFormatType": "JSON"
          },
          "KinesisStreamsOutput": {
            "ResourceARN": {
              "Fn::GetAtt": [
                "AggregatesStream",
                "Arn"
              ]
            },
            "RoleARN": {
              "Fn::GetAtt": [
                "KinesisAnalyticsRole",
                "Arn"
              ]
            }
          }
        }
      }
    },
    "JsonNewLineAdderLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "./fds-lambda-compaction/target/fds-lambda-compaction-1.0-SNAPSHOT.jar",
        "FunctionName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "JsonNewLineAdderLambda"
            ]
          ]
        },
        "Handler": "com.provectus.fds.compaction.JsonNewLineAdderLambda",
        "MemorySize": 128,
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "java8"
      }
    },
    "S3DeliveryAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "firehose.amazonaws.com",
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "FDSServicePrefix"
                  },
                  "firehose-s3-access-policy"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowAccessToS3Bucket",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "FDSS3Bucket"
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "FDSS3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "JsonNewLineAdderLambdaAccess",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:GetFunctionConfiguration"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "JsonNewLineAdderLambda",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "RawBcnsS3DeliveryStream": {
      "DependsOn": [
        "S3Bucket",
        "S3DeliveryAccessRole"
      ],
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "FDSRawBcnsS3DelieveryStream"
            ]
          ]
        },
        "DeliveryStreamType": "KinesisStreamAsSource",
        "KinesisStreamSourceConfiguration": {
          "KinesisStreamARN": {
            "Fn::GetAtt": [
              "BcnsStream",
              "Arn"
            ]
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "KinesisAnalyticsRole",
              "Arn"
            ]
          }
        },
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "FDSS3Bucket"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 50
          },
          "CompressionFormat": "GZIP",
          "Prefix": "raw/bcns/",
          "RoleARN": {
            "Fn::GetAtt": [
              "S3DeliveryAccessRole",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": true,
            "Processors": [
              {
                "Parameters": [
                  {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "JsonNewLineAdderLambda",
                        "Arn"
                      ]
                    }
                  },
                  {
                    "ParameterName": "RoleArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "S3DeliveryAccessRole",
                        "Arn"
                      ]
                    }
                  }
                ],
                "Type": "Lambda"
              }
            ]
          }
        }
      }
    },
    "JsonNewLineAdderLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JsonNewLineAdderLambda",
            "Arn"
          ]
        },
        "Principal": "firehose.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RawBcnsS3DeliveryStream",
            "Arn"
          ]
        }
      }
    },
    "RawImpressionsS3DeliveryStream": {
      "DependsOn": [
        "S3Bucket",
        "S3DeliveryAccessRole"
      ],
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "FDSRawImpressionsS3DelieveryStream"
            ]
          ]
        },
        "DeliveryStreamType": "KinesisStreamAsSource",
        "KinesisStreamSourceConfiguration": {
          "KinesisStreamARN": {
            "Fn::GetAtt": [
              "ImpressionsStream",
              "Arn"
            ]
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "KinesisAnalyticsRole",
              "Arn"
            ]
          }
        },
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "FDSS3Bucket"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 50
          },
          "CompressionFormat": "GZIP",
          "Prefix": "raw/impressions/",
          "RoleARN": {
            "Fn::GetAtt": [
              "S3DeliveryAccessRole",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": true,
            "Processors": [
              {
                "Parameters": [
                  {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "JsonNewLineAdderLambda",
                        "Arn"
                      ]
                    }
                  },
                  {
                    "ParameterName": "RoleArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "S3DeliveryAccessRole",
                        "Arn"
                      ]
                    }
                  }
                ],
                "Type": "Lambda"
              }
            ]
          }
        }
      }
    },
    "RawClicksS3DeliveryStream": {
      "DependsOn": [
        "S3Bucket",
        "S3DeliveryAccessRole"
      ],
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "FDSRawClicksS3DelieveryStream"
            ]
          ]
        },
        "DeliveryStreamType": "KinesisStreamAsSource",
        "KinesisStreamSourceConfiguration": {
          "KinesisStreamARN": {
            "Fn::GetAtt": [
              "ClickStream",
              "Arn"
            ]
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "KinesisAnalyticsRole",
              "Arn"
            ]
          }
        },
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "FDSS3Bucket"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 50
          },
          "CompressionFormat": "GZIP",
          "Prefix": "raw/clicks/",
          "RoleARN": {
            "Fn::GetAtt": [
              "S3DeliveryAccessRole",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": true,
            "Processors": [
              {
                "Parameters": [
                  {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "JsonNewLineAdderLambda",
                        "Arn"
                      ]
                    }
                  },
                  {
                    "ParameterName": "RoleArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "S3DeliveryAccessRole",
                        "Arn"
                      ]
                    }
                  }
                ],
                "Type": "Lambda"
              }
            ]
          }
        }
      }
    },
    "FDSAnalyticalDatabase": {
      "Type": "AWS::Glue::Database",
      "Properties": {
        "CatalogId": {
          "Ref": "AWS::AccountId"
        },
        "DatabaseInput": {
          "Name": {
            "Ref": "FDSAnalyticalDatabaseName"
          },
          "Description": "Database to hold tables for fds data"
        }
      }
    },
    "RawBcnsGlueTable": {
      "DependsOn": [
        "FDSAnalyticalDatabase"
      ],
      "Type": "AWS::Glue::Table",
      "Properties": {
        "DatabaseName": {
          "Ref": "FDSAnalyticalDatabaseName"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        },
        "TableInput": {
          "Name": "raw_bcns",
          "Description": "All input bcs in json format",
          "TableType": "EXTERNAL_TABLE",
          "Parameters": {
            "CrawlerSchemaDeserializerVersion": 1.0,
            "CrawlerSchemaSerializerVersion": 1.0,
            "classification": "json",
            "compressionType": "GZIP",
            "typeOfData": "file"
          },
          "StorageDescriptor": {
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "FDSS3Bucket"
                  },
                  "/raw/bcns/"
                ]
              ]
            },
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "Compressed": true,
            "NumberOfBuckets": -1,
            "SerdeInfo": {
              "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe"
            },
            "StoredAsSubDirectories": true,
            "Columns": [
              {
                "Name": "txid",
                "Type": "string"
              },
              {
                "Name": "campaign_item_id",
                "Type": "bigint"
              },
              {
                "Name": "domain",
                "Type": "string"
              },
              {
                "Name": "creative_id",
                "Type": "string"
              },
              {
                "Name": "appuid",
                "Type": "string"
              },
              {
                "Name": "creative_category",
                "Type": "string"
              },
              {
                "Name": "type",
                "Type": "string"
              },
              {
                "Name": "timestamp",
                "Type": "bigint"
              },
              {
                "Name": "win_price",
                "Type": "bigint"
              }
            ]
          }
        }
      }
    },
    "RawImpressionsGlueTable": {
      "DependsOn": [
        "FDSAnalyticalDatabase"
      ],
      "Type": "AWS::Glue::Table",
      "Properties": {
        "DatabaseName": {
          "Ref": "FDSAnalyticalDatabaseName"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        },
        "TableInput": {
          "Name": "raw_imps",
          "Description": "All input imps in json format",
          "TableType": "EXTERNAL_TABLE",
          "Parameters": {
            "CrawlerSchemaDeserializerVersion": 1.0,
            "CrawlerSchemaSerializerVersion": 1.0,
            "classification": "json",
            "compressionType": "GZIP",
            "typeOfData": "file"
          },
          "StorageDescriptor": {
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "FDSS3Bucket"
                  },
                  "/raw/imps/"
                ]
              ]
            },
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "Compressed": true,
            "NumberOfBuckets": -1,
            "SerdeInfo": {
              "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe"
            },
            "StoredAsSubDirectories": true,
            "Columns": [
              {
                "Name": "txid",
                "Type": "string"
              },
              {
                "Name": "campaign_item_id",
                "Type": "bigint"
              },
              {
                "Name": "domain",
                "Type": "string"
              },
              {
                "Name": "creative_id",
                "Type": "string"
              },
              {
                "Name": "appuid",
                "Type": "string"
              },
              {
                "Name": "creative_category",
                "Type": "string"
              },
              {
                "Name": "type",
                "Type": "string"
              },
              {
                "Name": "timestamp",
                "Type": "bigint"
              },
              {
                "Name": "win_price",
                "Type": "bigint"
              }
            ]
          }
        }
      }
    },
    "RawClicksGlueTable": {
      "DependsOn": [
        "FDSAnalyticalDatabase"
      ],
      "Type": "AWS::Glue::Table",
      "Properties": {
        "DatabaseName": {
          "Ref": "FDSAnalyticalDatabaseName"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        },
        "TableInput": {
          "Name": "raw_clicks",
          "Description": "All input clicks in json format",
          "TableType": "EXTERNAL_TABLE",
          "Parameters": {
            "CrawlerSchemaDeserializerVersion": 1.0,
            "CrawlerSchemaSerializerVersion": 1.0,
            "classification": "json",
            "compressionType": "GZIP",
            "typeOfData": "file"
          },
          "StorageDescriptor": {
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "FDSS3Bucket"
                  },
                  "/raw/clicks/"
                ]
              ]
            },
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "Compressed": true,
            "NumberOfBuckets": -1,
            "SerdeInfo": {
              "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe"
            },
            "StoredAsSubDirectories": true,
            "Columns": [
              {
                "Name": "txid",
                "Type": "string"
              },
              {
                "Name": "campaign_item_id",
                "Type": "bigint"
              },
              {
                "Name": "domain",
                "Type": "string"
              },
              {
                "Name": "creative_id",
                "Type": "string"
              },
              {
                "Name": "appuid",
                "Type": "string"
              },
              {
                "Name": "creative_category",
                "Type": "string"
              },
              {
                "Name": "type",
                "Type": "string"
              },
              {
                "Name": "timestamp",
                "Type": "bigint"
              },
              {
                "Name": "win_price",
                "Type": "bigint"
              }
            ]
          }
        }
      }
    },
    "ParquetBcnsGlueTable": {
      "DependsOn": [
        "FDSAnalyticalDatabase"
      ],
      "Type": "AWS::Glue::Table",
      "Properties": {
        "TableInput": {
          "Description": "All input bcns in parquet format",
          "TableType": "EXTERNAL_TABLE",
          "StorageDescriptor": {
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "FDSS3Bucket"
                  },
                  "/parquet/bcns/"
                ]
              ]
            },
            "InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
            "OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
            "Compressed": false,
            "NumberOfBuckets": -1,
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
              "Parameters": {
                "serialization.format": 1
              }
            },
            "StoredAsSubDirectories": false,
            "Columns": [
              {
                "Name": "txid",
                "Type": "string"
              },
              {
                "Name": "campaign_item_id",
                "Type": "bigint"
              },
              {
                "Name": "domain",
                "Type": "string"
              },
              {
                "Name": "creative_id",
                "Type": "string"
              },
              {
                "Name": "appuid",
                "Type": "string"
              },
              {
                "Name": "creative_category",
                "Type": "string"
              },
              {
                "Name": "type",
                "Type": "string"
              },
              {
                "Name": "timestamp",
                "Type": "bigint"
              },
              {
                "Name": "win_price",
                "Type": "bigint"
              }
            ]
          },
          "Name": "parquet_bcns"
        },
        "DatabaseName": {
          "Ref": "FDSAnalyticalDatabaseName"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "ParquetImpsGlueTable": {
      "DependsOn": [
        "FDSAnalyticalDatabase"
      ],
      "Type": "AWS::Glue::Table",
      "Properties": {
        "TableInput": {
          "Description": "All input imps in parquet format",
          "TableType": "EXTERNAL_TABLE",
          "StorageDescriptor": {
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "FDSS3Bucket"
                  },
                  "/parquet/imps/"
                ]
              ]
            },
            "InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
            "OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
            "Compressed": false,
            "NumberOfBuckets": -1,
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
              "Parameters": {
                "serialization.format": 1
              }
            },
            "StoredAsSubDirectories": false,
            "Columns": [
              {
                "Name": "txid",
                "Type": "string"
              },
              {
                "Name": "campaign_item_id",
                "Type": "bigint"
              },
              {
                "Name": "domain",
                "Type": "string"
              },
              {
                "Name": "creative_id",
                "Type": "string"
              },
              {
                "Name": "appuid",
                "Type": "string"
              },
              {
                "Name": "creative_category",
                "Type": "string"
              },
              {
                "Name": "type",
                "Type": "string"
              },
              {
                "Name": "timestamp",
                "Type": "bigint"
              },
              {
                "Name": "win_price",
                "Type": "bigint"
              }
            ]
          },
          "Name": "parquet_imps"
        },
        "DatabaseName": {
          "Ref": "FDSAnalyticalDatabaseName"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "ParquetClickGlueTable": {
      "DependsOn": [
        "FDSAnalyticalDatabase"
      ],
      "Type": "AWS::Glue::Table",
      "Properties": {
        "TableInput": {
          "Description": "All input clicks in parquet format",
          "TableType": "EXTERNAL_TABLE",
          "StorageDescriptor": {
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "FDSS3Bucket"
                  },
                  "/parquet/clicks/"
                ]
              ]
            },
            "InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
            "OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
            "Compressed": false,
            "NumberOfBuckets": -1,
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
              "Parameters": {
                "serialization.format": 1
              }
            },
            "StoredAsSubDirectories": false,
            "Columns": [
              {
                "Name": "txid",
                "Type": "string"
              },
              {
                "Name": "campaign_item_id",
                "Type": "bigint"
              },
              {
                "Name": "domain",
                "Type": "string"
              },
              {
                "Name": "creative_id",
                "Type": "string"
              },
              {
                "Name": "appuid",
                "Type": "string"
              },
              {
                "Name": "creative_category",
                "Type": "string"
              },
              {
                "Name": "type",
                "Type": "string"
              },
              {
                "Name": "timestamp",
                "Type": "bigint"
              },
              {
                "Name": "win_price",
                "Type": "bigint"
              }
            ]
          },
          "Name": "parquet_clicks"
        },
        "DatabaseName": {
          "Ref": "FDSAnalyticalDatabaseName"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "JsonToParquetLambda": {
      "DependsOn": [
        "S3DeliveryAccessRole"
      ],
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "./fds-lambda-compaction/target/fds-lambda-compaction-1.0-SNAPSHOT.jar",
        "FunctionName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "FDSServicePrefix"
              },
              "JsonToParquetConverterLambda"
            ]
          ]
        },
        "Handler": "com.provectus.fds.compaction.JsonToParquetConverterLambda",
        "MemorySize": 512,
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "S3DeliveryAccessRole",
            "Arn"
          ]
        },
        "Runtime": "java8"
      }
    },
    "JsonToParquetLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JsonToParquetLambda",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:s3:::",
              {
                "Ref": "FDSS3Bucket"
              }
            ]
          ]
        }
      }
    }
  }
}