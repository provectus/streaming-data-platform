AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Data streaming solution for Fast Data
Metadata:
  Authors:
    Description: German Osin (gosin@provectus.com)
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - ServicePrefix
          - AnalyticalDBName
          - S3BucketName
          - BufInterval
          - BufSize
          - ShardCount
    ParameterLabels:
      - ServicePrefix:
          default: Prefix for all entities
      - AnalyticalDBName:
          default: Name for all databases
      - S3BucketName:
          default: Name of S3 bucket
      - BufInterval:
          default: Buffering interval
      - BufSize:
          default: Buffering size
      - ShardCount:
          default: Number of Kinesis streams shards
Parameters:
  ServicePrefix:
    AllowedPattern: '^[a-zA-Z]{4,61}$'
    ConstraintDescription: Prefix should be DNS compliant
    Default: testing
    Type: String
  AnalyticalDBName:
    AllowedPattern: '^[a-z]{4,61}$'
    Default: fdsdb
    Type: String
  S3BucketName:
    AllowedPattern: '^[a-z]{4,61}$'
    ConstraintDescription: Bucket name must not contain uppercase characters or underscores
    Default: fdsbucket
    Type: String
  BufInterval:
    Default: 60
    Type: Number
  BufSize:
    Default: 50
    Type: Number
  ShardCount:    
    Default: 2
    Type: Number
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref 'S3BucketName'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt 'JsonToParquetLambda.Arn'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${ServicePrefix}KinesisAccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: loggroups
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt 'LogGroupKinesisAnalyticsApp.Arn'
                  - !GetAtt 'LogGroupJsonNewLineAdderLambda.Arn'
                  - !GetAtt 'LogGroupJsonToParquetLambda.Arn'
                  - !GetAtt 'LogGroupKinesisToDynamoDbLambda.Arn'
                  - !GetAtt 'LogGroupAppStarterLambda.Arn'
              - Sid: kinesisanalytics
                Effect: Allow
                Action:
                  - kinesisanalytics:StartApplication
                  - kinesisanalytics:DescribeApplication
                Resource: !Sub 'arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/${ServicePrefix}Application'
              - Sid: kinesis
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:PutRecord
                  - kinesis:ListStreams
                  - kinesis:PutRecords
                Resource:
                  - !GetAtt 'BcnsStream.Arn'
              - Sid: dynamo
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamoDB:Query
                  - dynamoDB:Scan
                Resource:
                  - !GetAtt 'AggregationDynamoTable.Arn'
  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - kinesisanalytics.amazonaws.com
                - firehose.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${ServicePrefix}KinesisAnalyticsAccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: InvokeLambda
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt 'ReportingLambda.Arn'
              - Effect: Allow
                Sid: WriteLogs
                Action:
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt 'LogGroupKinesisAnalyticsApp.Arn'
              - Effect: Allow
                Sid: ReadInputStream
                Action:
                  - kinesis:ListShards
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:SubscribeToShard
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - kinesis:DescribeStream
                Resource:
                  - !GetAtt 'BcnsStream.Arn'
                  - !GetAtt 'AggregatesStream.Arn'
                  - !GetAtt 'ClickStream.Arn'
                  - !GetAtt 'ImpressionsStream.Arn'
  BcnsStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}bcns'
      ShardCount: !Ref 'ShardCount'
  ClickStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}clicks'
      ShardCount: !Ref 'ShardCount'
  ImpressionsStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}impressions'
      ShardCount: !Ref 'ShardCount'
  AggregatesStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}aggregates'
      ShardCount: !Ref 'ShardCount'
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ServicePrefix}API'
      Description: API used for  requests
      FailOnWarnings: false
      Body:
        openapi: 3.0.0
        components:
          schemas:
            Bid:
              title: Bid
              type: object
              properties:
                appuid:
                  required: true
                  type: string
                campaign_item_id:
                  required: true
                  type: integer
                creative_category:
                  type: string
                creative_id:
                  type: string
                txid:
                  required: true
                  type: string
                domain:
                  type: string
                win_price:
                  type: integer
                type:
                  type: string
                  default: bid
            Impression:
              title: Impression
              type: object
              properties:
                txid:
                  required: true
                  type: string
                win_price:
                  required: true
                  type: integer
                type:
                  type: string
                  default: imp
            Click:
              title: Click
              type: object
              properties:
                txid:
                  required: true
                  type: string
                type:
                  type: string
                  default: click
        info:
          title: KinesisProxy
          version: '2016-03-31T18:25:32Z'
        paths:
          /bid:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Bid'
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json: !Sub |
                    {
                        "StreamName": "${BcnsStream}",
                        "Data": "$util.base64Encode($input.json('$'))",
                        "PartitionKey": $input.json('txid')
                    }
                responses:
                  default:
                    statusCode: '200'
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord'
          /click:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Click'
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json: !Sub |
                    {
                        "StreamName": "${BcnsStream}",
                        "Data": "$util.base64Encode($input.json('$'))",
                        "PartitionKey": $input.json('txid')
                    }
                responses:
                  default:
                    statusCode: '200'
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord'
          /impression:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Impression'
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json: !Sub |
                    {
                        "StreamName": "${BcnsStream}",
                        "Data": "$util.base64Encode($input.json('$'))",
                        "PartitionKey": $input.json('txid')
                    }
                responses:
                  default:
                    statusCode: '200'
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord'
  LogGroupKinesisAnalyticsApp:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/kinesisanalytics/${ServicePrefix}KinesisAnalyticsApp'
  KinesisAnalyticsApp:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName: !Sub '${ServicePrefix}Application'
      ApplicationDescription: Joining & Aggregation app
      ApplicationCode: |
        CREATE STREAM "bcns_impressions" (
         "txid" VARCHAR(64),
           "win_price" BIGINT
        );

        CREATE OR REPLACE PUMP "bcns_impressions_pump" AS
         INSERT INTO "bcns_impressions" ("txid","win_price")
        SELECT "txid","win_price" FROM "bcns_001" WHERE "type"='imp';

        CREATE STREAM "bcns_bids" (
                         "txid" VARCHAR(64),
                         "campaign_item_id" BIGINT,
                         "domain" VARCHAR(255),
                         "creative_id" VARCHAR(255),
                         "creative_category" VARCHAR(255),
                         "appuid" VARCHAR(255)
        );

        CREATE OR REPLACE PUMP "bcns_bids_pump" AS
        INSERT INTO "bcns_bids" ("txid","campaign_item_id","domain","creative_id","creative_category","appuid")
        SELECT "txid","campaign_item_id","domain","creative_id","creative_category","appuid"
        FROM "bcns_001" WHERE "type"='bid';

        CREATE STREAM "bcns_clicks" (
                        "txid" VARCHAR(64)
        );

        CREATE OR REPLACE PUMP "bcns_clicks_pump" AS
        INSERT INTO "bcns_clicks" ("txid")
        SELECT "txid" FROM "bcns_001" WHERE "type"='click';

        CREATE STREAM "impressions"(
                         "txid" VARCHAR(64),
                         "campaign_item_id" BIGINT,
                         "domain" VARCHAR(255),
                         "creative_id" VARCHAR(255),
                         "creative_category" VARCHAR(255),
                         "appuid" VARCHAR(255),
                         "win_price" BIGINT
        );

        CREATE OR REPLACE PUMP "impressions_pump" AS
        INSERT INTO "impressions" ( "txid", "campaign_item_id",
        "domain", "creative_id", "creative_category", "appuid", "win_price")
        SELECT STREAM
        b."txid", b."campaign_item_id", b."domain", b."creative_id",
        b."creative_category", b."appuid", i."win_price"
        FROM "bcns_bids" OVER (RANGE INTERVAL '5' MINUTE PRECEDING) as b
        JOIN "bcns_impressions" OVER (RANGE INTERVAL '5' MINUTE PRECEDING) AS i ON (b."txid"=i."txid");

        CREATE STREAM "clicks"(
                         "txid" VARCHAR(16),
                         "campaign_item_id" BIGINT,
                         "domain" VARCHAR(255),
                         "creative_id" VARCHAR(255),
                         "creative_category" VARCHAR(255),
                         "appuid" VARCHAR(255),
                         "win_price" BIGINT
        );

        CREATE OR REPLACE PUMP "clicks_pump" AS
        INSERT INTO "clicks" ( "txid", "campaign_item_id",
        "domain", "creative_id", "creative_category", "appuid", "win_price")
        SELECT STREAM
        i."txid", i."campaign_item_id", i."domain", i."creative_id",
        i."creative_category", i."appuid", i."win_price"
        FROM "impressions" OVER (RANGE INTERVAL '15' MINUTE PRECEDING) as i
        JOIN "bcns_clicks" OVER (RANGE INTERVAL '15' MINUTE PRECEDING) AS c ON (i."txid"=c."txid");

        CREATE STREAM "campaign_aggregates"(
                        "campaign_item_id" BIGINT,
                        "period" TIMESTAMP,
                        "bids" BIGINT,
                        "imps" BIGINT,
                        "clicks" BIGINT
         );

        CREATE OR REPLACE PUMP "campaign_item_performance_bids_pump" AS
        INSERT INTO "campaign_aggregates" ("campaign_item_id","period","bids")
        SELECT STREAM "campaign_item_id",
                       STEP("bcns_bids".ROWTIME BY INTERVAL '10' MINUTE) as "period",
                       count(*) as "bids"
        FROM "bcns_bids"
        GROUP BY "campaign_item_id", STEP("bcns_bids".ROWTIME BY INTERVAL '10' MINUTE);

        CREATE OR REPLACE PUMP "campaign_item_performance_imps_pump" AS
        INSERT INTO "campaign_aggregates" ("campaign_item_id", "period", "imps")
        SELECT STREAM "campaign_item_id",
                       STEP("impressions".ROWTIME BY INTERVAL '10' MINUTE) as
                      "period",
                      count(1) as "imps"
        FROM "impressions"
        GROUP BY "campaign_item_id", STEP("impressions".ROWTIME BY INTERVAL '10' MINUTE);

        CREATE OR REPLACE PUMP "campaign_item_performance_clicks_pump" AS
        INSERT INTO "campaign_aggregates" ("campaign_item_id", "period", "clicks")
        SELECT STREAM "campaign_item_id",
                       STEP("clicks".ROWTIME BY INTERVAL '10' MINUTE) as "period",
                       count(1) as "clicks"
        FROM "clicks"
        GROUP BY "campaign_item_id", STEP("clicks".ROWTIME BY INTERVAL '10' MINUTE);
      Inputs:
        - KinesisStreamsInput:
            ResourceARN: !GetAtt 'BcnsStream.Arn'
            RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
          NamePrefix: bcns
          InputSchema:
            RecordColumns:
              - Name: txid
                SqlType: VARCHAR(64)
                Mapping: $.txid
              - Name: campaign_item_id
                SqlType: BIGINT
                Mapping: $.campaign_item_id
              - Name: domain
                SqlType: VARCHAR(255)
                Mapping: $.domain
              - Name: creative_id
                SqlType: VARCHAR(255)
                Mapping: $.creative_id
              - Name: appuid
                SqlType: VARCHAR(255)
                Mapping: $.appuid
              - Name: creative_category
                SqlType: VARCHAR(255)
                Mapping: $.creative_category
              - Name: type
                SqlType: VARCHAR(16)
                Mapping: $.type
              - Name: win_price
                SqlType: BIGINT
                Mapping: $.win_price
            RecordEncoding: UTF-8
            RecordFormat:
              RecordFormatType: JSON
              MappingParameters:
                JSONMappingParameters:
                  RecordRowPath: $
  KinesisAnalyticsAppClicksOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    DependsOn: KinesisAnalyticsApp
    Properties:
      ApplicationName: !Ref 'KinesisAnalyticsApp'
      Output:
        Name: clicks
        DestinationSchema:
          RecordFormatType: JSON
        KinesisStreamsOutput:
          ResourceARN: !GetAtt 'ClickStream.Arn'
          RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
  KinesisAnalyticsAppImpsOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    DependsOn: KinesisAnalyticsApp
    Properties:
      ApplicationName: !Ref 'KinesisAnalyticsApp'
      Output:
        Name: impressions
        DestinationSchema:
          RecordFormatType: JSON
        KinesisStreamsOutput:
          ResourceARN: !GetAtt 'ImpressionsStream.Arn'
          RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
  KinesisAnalyticsAggregatesAppOutputs:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    DependsOn: KinesisAnalyticsApp
    Properties:
      ApplicationName: !Ref 'KinesisAnalyticsApp'
      Output:
        Name: campaign_aggregates
        DestinationSchema:
          RecordFormatType: JSON
        KinesisStreamsOutput:
          ResourceARN: !GetAtt 'AggregatesStream.Arn'
          RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
  LogGroupJsonNewLineAdderLambda:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${ServicePrefix}JsonNewLineAdder'
  JsonNewLineAdderLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-compaction/target/fds-lambda-compaction-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}JsonNewLineAdder'
      Handler: com.provectus.fds.compaction.JsonNewLineAdderLambda
      MemorySize: 128
      Timeout: 180
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: java8
  S3DeliveryAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${ServicePrefix}FirehoseS3AccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowAccessToS3Bucket
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Sid: JsonNewLineAdderAccess
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource:
                  - !GetAtt 'JsonNewLineAdderLambda.Arn'
              - Sid: glue
                Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetPartition
                  - glue:GetTables
                  - glue:GetPartitions
                  - glue:UpdateTable
                  - glue:CreatePartition
                  - glue:GetDatabases
                  - glue:UpdatePartition
                  - glue:GetTable
                Resource:
                  - '*'
  RawBcnsS3DeliveryStream:
    DependsOn:
      - S3Bucket
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawBcnsS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'BcnsStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/bcns/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  JsonNewLineAdderLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt 'JsonNewLineAdderLambda.Arn'
      Principal: firehose.amazonaws.com
      SourceArn: !GetAtt 'RawBcnsS3DeliveryStream.Arn'
  RawImpressionsS3DeliveryStream:
    DependsOn:
      - S3Bucket
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawImpressionsS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'ImpressionsStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/impressions/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  RawClicksS3DeliveryStream:
    DependsOn:
      - S3Bucket
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawClicksS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'ClickStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/clicks/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  RawAggregatesS3DeliveryStream:
    DependsOn:
      - S3Bucket
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawAggrefatesS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'AggregatesStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/aggregates/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  AnalyticalDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: !Ref 'AnalyticalDBName'
        Description: Database to hold tables for fds data
  RawBcnsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_bcns
        Description: All input bcs in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/bcns/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
  RawImpressionsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_impressions
        Description: All input imps in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/impressions/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
  RawClicksGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_clicks
        Description: All input clicks in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/clicks/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
  RawAggregatesGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_aggregates
        Description: All input aggregates in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/aggregates/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: campaign_item_id
              Type: bigint
            - Name: bids
              Type: bigint
            - Name: imps
              Type: bigint
            - Name: clicks
              Type: bigint
  ParquetBcnsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input bcns in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/bcns/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
        Name: parquet_bcns
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  ParquetImpsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input imps in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/impressions/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
        Name: parquet_impressions
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  ParquetClickGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input clicks in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/clicks/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
        Name: parquet_clicks
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  ParquetAggregatesGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input aggregates in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/aggregates/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: campaign_item_id
              Type: bigint
            - Name: period
              Type: string
            - Name: bids
              Type: bigint
            - Name: imps
              Type: bigint
            - Name: clicks
              Type: bigint
        Name: parquet_aggregates
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  LogGroupJsonToParquetLambda:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${ServicePrefix}JsonToParquetConverter'
  JsonToParquetLambda:
    DependsOn:
      - S3DeliveryAccessRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-compaction/target/fds-lambda-compaction-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}JsonToParquetConverter'
      Environment:
        Variables:
          GLUE_CATALOG_ID: !Ref 'AWS::AccountId'
          GLUE_DATABASE_NAME: !Ref 'AnalyticalDBName'
      Handler: com.provectus.fds.compaction.JsonToParquetConverterLambda
      MemorySize: 512
      Timeout: 180
      Role: !GetAtt 'S3DeliveryAccessRole.Arn'
      Runtime: java8
  JsonToParquetLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt 'JsonToParquetLambda.Arn'
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${S3BucketName}'
  AggregationDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: campaign_item_id
          AttributeType: N
        - AttributeName: period
          AttributeType: N
      KeySchema:
        - AttributeName: campaign_item_id
          KeyType: HASH
        - AttributeName: period
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  KinesisToDynamoDbIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub '${ServicePrefix}KinesisPeristerAccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - kinesis:ListTagsForStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - dynamoDB:PutItem
                  - dynamoDB:UpdateItem
                  - dynamodb:BatchGetItem
                  - dynamoDB:Query
                  - dynamoDB:Scan
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt 'AggregatesStream.Arn'
                  - !GetAtt 'AggregationDynamoTable.Arn'
  LogGroupKinesisToDynamoDbLambda:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${ServicePrefix}KinesisToDynamoDbPersister'
  KinesisToDynamoDbLambda:
    DependsOn:
      - KinesisToDynamoDbIAMRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-dynamodb-persister/target/fds-lambda-dynamodb-persister-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}KinesisToDynamoDbPersister'
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref 'AggregationDynamoTable'
      Handler: com.provectus.fds.dynamodb.DynamoDBPersisterLambda
      MemorySize: 256
      Timeout: 180
      Role: !GetAtt 'KinesisToDynamoDbIAMRole.Arn'
      Runtime: java8
  KinesisToDynamoDbConsumer:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt 'AggregatesStream.Arn'
      FunctionName: !GetAtt 'KinesisToDynamoDbLambda.Arn'
      StartingPosition: TRIM_HORIZON
      Enabled: True
  LogGroupAppStarterLambda:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/aws/lambda/${ServicePrefix}AppStarter'
  AppStarterLambda:
    Type: AWS::Serverless::Function
    DependsOn: LambdaExecutionRole
    Properties:
      CodeUri: ./fds-lambda-utils/target/fds-lambda-utils-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}AppStarter'
      Environment:
        Variables:
          STREAM_NAME: !Ref 'BcnsStream'
      Handler: com.provectus.fds.utils.ApplicationStartLambda
      MemorySize: 256
      Timeout: 180
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: java8
  AppStarter:
    Type: Custom::AppStarter
    DependsOn: KinesisAnalyticsApp
    Properties:
      ServiceToken: !GetAtt 'AppStarterLambda.Arn'
      ApplicationName: !Sub '${ServicePrefix}Application'
  ApiGatewayStage:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'Api'
      StageName: !Sub '${ServicePrefix}'
# Reporting API
  ReportingApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ServicePrefix}ReportingApi'
      Description: API used for reporting requests
      FailOnWarnings: false
      Body:
        openapi: 3.0.0
        components:
          schemas:
            Aggregation:
              title: Aggregation
              type: object
              properties:
                campaign_item_id:
                  required: true
                  type: integer
                period:
                  type: integer
                clicks:
                  type: integer
                imps:
                  type: integer
                bids:
                  type: integer
        info:
          title: Reporting API
          version: '2016-03-31T18:25:32Z'
        paths:
          /reports/campaigns/{campaign_item_id}:
            get:
              parameters:
                - in: path
                  name: campaign_item_id
                  schema:
                    type: integer
                  required: true
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Aggregation'

              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                responses:
                  default:
                    statusCode: '200'
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReportingLambda.Arn}/invocations'
          /reports/campaigns/{campaign_item_id}/period:
            get:
              parameters:
                - in: path
                  name: campaign_item_id
                  schema:
                    type: integer
                  required: true
                - in: query
                  name: timezone
                  schema:
                    type: string
                - in: query
                  name: period
                  schema:
                    type: string
                - in: query
                  name: from
                  schema:
                    type: integer
                - in: query
                  name: to
                  schema:
                    type: integer
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/Aggregation'
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                responses:
                  default:
                    statusCode: '200'
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReportingLambda.Arn}/invocations'
  ReportingLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-reports/target/fds-lambda-reports-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}ReportsHandler'
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref 'AggregationDynamoTable'
      Handler: com.provectus.fds.reports.ApiHandler
      MemorySize: 256
      Timeout: 180
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: java8
  ReportingApiGatewayStage:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'ReportingApi'
      StageName: !Sub '${ServicePrefix}'
Outputs:
  UrlForAPI:
    Description: Root URL of the API gateway
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ServicePrefix}'
  UrlForReports:
    Description: Root URL of the reports gateway
    Value: !Sub 'https://${ReportingApi}.execute-api.${AWS::Region}.amazonaws.com/${ServicePrefix}'