AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Data streaming solution for Fast Data
Metadata:
  Authors:
    Description: German Osin (gosin@provectus.com)
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - ServicePrefix
          - AnalyticalDBName
          - S3BucketName
          - BufInterval
          - BufSize
          - ShardCount
          - SourceStreamName
          - SinkAggregateStreamName
          - SinkBidStreamName
          - SinkImpressionStreamName
          - SinkClickStreamName
          - AggregationPeriod
          - BidsSessionTimeout
          - ClicksSessionTimeout
    ParameterLabels:
      - ServicePrefix:
          default: Prefix for all entities
      - AnalyticalDBName:
          default: Name for all databases
      - S3BucketName:
          default: Name of S3 bucket
      - BufInterval:
          default: Buffering interval
      - BufSize:
          default: Buffering size
      - ShardCount:
          default: Number of Kinesis streams shards
      - SourceStreamName:
          default: A name of the input Kinesis stream
      - SinkAggregateStreamName:
          default: A name of the aggregates Kinesis stream
      - SinkBidStreamName:
          default: A name of the bids Kinesis stream
      - SinkImpressionStreamName:
          default: A name of the impressions Kinesis stream
      - SinkClickStreamName:
          default: A name of the clicks Kinesis stream
      - AggregationPeriod:
          default: Period of triggering aggreation function
      - BidsSessionTimeout:
          default: Session length (in minutes) for joing bids with impressions
      - ClicksSessionTimeout:
          default: Session length (in minutes) for joing impressions with clicks
Parameters:
  ServicePrefix:
    AllowedPattern: '^[-a-zA-Z0-9]{4,61}$'
    ConstraintDescription: Prefix should be DNS compliant
    Default: testing
    Type: String
  AnalyticalDBName:
    AllowedPattern: '^[-a-zA-Z0-9]{4,61}$'
    Default: fdsdb
    Type: String
  S3BucketName:
    AllowedPattern: '^[-a-zA-Z0-9]{4,61}$'
    ConstraintDescription: Bucket name must not contain uppercase characters or underscores
    Default: fdsbucket
    Type: String
  BufInterval:
    Default: 60
    Type: Number
  BufSize:
    Default: 50
    Type: Number
  ShardCount:
    Default: 2
    Type: Number
  SourceStreamName:
    AllowedPattern: '^[-a-zA-Z0-9_]{4,61}$'
    ConstraintDescription: Should be a valid Kinesis topic name
    Default: bcns
    Type: String
  SinkAggregateStreamName:
    AllowedPattern: '^[-a-zA-Z0-9_]{4,61}$'
    ConstraintDescription: Should be a valid Kinesis topic name
    Default: aggregates
    Type: String
  SinkBidStreamName:
    AllowedPattern: '^[-a-zA-Z0-9_]{4,61}$'
    ConstraintDescription: Should be a valid Kinesis topic name
    Default: bids
    Type: String
  SinkImpressionStreamName:
    AllowedPattern: '^[-a-zA-Z0-9_]{4,61}$'
    ConstraintDescription: Should be a valid Kinesis topic name
    Default: impressions
    Type: String
  SinkClickAggregateStreamName:
    AllowedPattern: '^[-a-zA-Z0-9_]{4,61}$'
    ConstraintDescription: Should be a valid Kinesis topic name
    Default: clicks
    Type: String
  AggregationPeriod:
    Default: 10
    Type: Number
  BidsSessionTimeout:
    Default: 5
    Type: Number
  ClicksSessionTimeout:
    Default: 5
    Type: Number
Rules:
  RegionSupport:
    Assertions:
      - Assert:
          Fn::Contains:
            - - 'us-east-1'
              - 'us-east-2'
              - 'us-west-2'
              - 'eu-west-1'
              - 'eu-central-1'
            - !Ref 'AWS::Region'
        AssertDescription: This stack is only available in the US East (N. Virginia, Ohio), US West (Oregon), EU (Ireland and Frankfurt) regions. Please launch the stack in one of these regions to continue.
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${ServicePrefix}KinesisAccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: loggroups
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt 'LogGroupKinesisAnalyticsApp.Arn'
                  - !GetAtt 'LogGroupJsonNewLineAdderLambda.Arn'
                  - !GetAtt 'LogGroupJsonToParquetLambda.Arn'
                  - !GetAtt 'LogGroupKinesisToDynamoDbLambda.Arn'
              - Sid: kinesisanalytics
                Effect: Allow
                Action:
                  - kinesisanalytics:StartApplication
                  - kinesisanalytics:DescribeApplication
                Resource: !Sub 'arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/${ServicePrefix}Application'
              - Sid: kinesis
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:PutRecord
                  - kinesis:ListStreams
                  - kinesis:PutRecords
                Resource:
                  - !GetAtt 'BcnStream.Arn'
              - Sid: dynamo
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamoDB:Query
                  - dynamoDB:Scan
                Resource:
                  - !GetAtt 'AggregationDynamoTable.Arn'
  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - kinesis.amazonaws.com
                - kinesisanalytics.amazonaws.com
                - firehose.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${ServicePrefix}KinesisAnalyticsAccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: LogGroupsAccess
                Action:
                  - logs:DescribeLogGroups
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
              - Effect: Allow
                Sid: CloudWatchAccess
                Action:
                  - cloudwatch:*
                Resource:
                  - '*'
              - Effect: Allow
                Sid: LogStreamsAccess
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupKinesisAnalyticsApp}:log-stream:*'
              - Effect: Allow
                Sid: KinesisStreamsAccess
                Action:
                  - kinesis:*
                Resource:
                  - !GetAtt 'BcnStream.Arn'
                  - !GetAtt 'BidStream.Arn'
                  - !GetAtt 'ImpressionStream.Arn'
                  - !GetAtt 'ClickStream.Arn'
                  - !GetAtt 'AggregateStream.Arn'
              - Effect: Allow
                Sid: S3BucketAccess
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        "Fn::GetAtt":
          - CloudWatchRole
          - Arn
  BcnStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}bcns'
      ShardCount: !Ref 'ShardCount'
  BidStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}bids'
      ShardCount: !Ref 'ShardCount'
  ClickStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}clicks'
      ShardCount: !Ref 'ShardCount'
  ImpressionStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}impressions'
      ShardCount: !Ref 'ShardCount'
  AggregateStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${ServicePrefix}aggregates'
      ShardCount: !Ref 'ShardCount'
  LogGroupApi:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/kinesisanalytics/${ServicePrefix}Api'
  LogStreamApi:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroupApi}'
      LogStreamName: 'LogStreamApi'
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ServicePrefix}API'
      Description: API used for  requests
      FailOnWarnings: false
      Body:
        openapi: 3.0.0
        components:
          schemas:
            Bid:
              title: Bid
              type: object
              properties:
                app_uid:
                  required: true
                  type: string
                campaign_item_id:
                  required: true
                  type: integer
                creative_category:
                  type: string
                creative_id:
                  type: string
                tx_id:
                  required: true
                  type: string
                domain:
                  type: string
                win_price:
                  type: integer
                type:
                  type: string
                  default: bid
            Impression:
              title: Impression
              type: object
              properties:
                tx_id:
                  required: true
                  type: string
                win_price:
                  required: true
                  type: integer
                type:
                  type: string
                  default: imp
            Click:
              title: Click
              type: object
              properties:
                tx_id:
                  required: true
                  type: string
                type:
                  type: string
                  default: click
        info:
          title: KinesisProxy
          version: '2016-03-31T18:25:32Z'
        paths:
          /bid:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Bid'
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json: !Sub |
                    #set($allParams = $input.path('$'))
                    #set($discard=$allParams.put("type", "bid"))
                    {
                        "StreamName": "${BcnStream}",
                        "Data": "$util.base64Encode($input.json('$'))",
                        "PartitionKey": $input.json('tx_id')
                    }
                responses:
                  default:
                    statusCode: '200'
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord'
          /click:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Click'
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json: !Sub |
                    #set($allParams = $input.path('$'))
                    #set($discard=$allParams.put("type", "click"))
                    {
                        "StreamName": "${BcnStream}",
                        "Data": "$util.base64Encode($input.json('$'))",
                        "PartitionKey": $input.json('tx_id')
                    }
                responses:
                  default:
                    statusCode: '200'
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord'
          /impression:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Impression'
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json: !Sub |
                    #set($allParams = $input.path('$'))
                    #set($discard=$allParams.put("type", "imp"))
                    {
                        "StreamName": "${BcnStream}",
                        "Data": "$util.base64Encode($input.json('$'))",
                        "PartitionKey": $input.json('tx_id')
                    }
                responses:
                  default:
                    statusCode: '200'
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:kinesis:action/PutRecord'
  LogGroupKinesisAnalyticsApp:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/kinesisanalytics/${ServicePrefix}KinesisAnalyticsApp'
  LogStreamKinesisAnalyticsApp:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub '${LogGroupKinesisAnalyticsApp}'
      LogStreamName: 'LogStreamKinesisAnalyticsApp'
  AppStarterLambda:
    Type: AWS::Serverless::Function
    DependsOn: LambdaExecutionRole
    Properties:
      CodeUri: ./fds-lambda-utils/target/fds-lambda-utils-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}AppStarter'
      Handler: com.provectus.fds.utils.ApplicationStartLambda
      MemorySize: 256
      Timeout: 180
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: java8
  AppStarter:
    Type: Custom::AppStarter
    DependsOn: KinesisAnalyticsApp
    Properties:
      ServiceToken: !GetAtt 'AppStarterLambda.Arn'
      ApplicationName: !Sub '${ServicePrefix}Application'
  KinesisAnalyticsApp:
    Type: AWS::KinesisAnalyticsV2::Application
    DependsOn:
      - BcnStream
      - BidStream
      - ImpressionStream
      - ClickStream
      - AggregateStream
    Properties:
      ApplicationName: !Sub '${ServicePrefix}Application'
      ApplicationDescription: Flink joining & aggregation app
      RuntimeEnvironment: FLINK-1_6
      ServiceExecutionRole: !GetAtt 'KinesisAnalyticsRole.Arn'
      ApplicationConfiguration:
        ApplicationCodeConfiguration:
          CodeContentType: ZIPFILE
          CodeContent:
            S3ContentLocation:
              BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
              FileKey: fds-flink-streaming.jar
        EnvironmentProperties:
          PropertyGroups:
            - PropertyGroupId: SourceConfigProperties
              PropertyMap:
                source.aws.region: !Sub '${AWS::Region}'
                source.stream.init.pos: 'TRIM_HORIZON'
                source.stream.name: !Ref 'BcnStream'
            - PropertyGroupId: SinkConfigProperties
              PropertyMap:
                sink.aws.region: !Sub '${AWS::Region}'
                sink.aggregate.stream.name: !Ref 'AggregateStream'
                sink.bid.stream.name: !Ref 'BidStream'
                sink.impression.stream.name: !Ref 'ImpressionStream'
                sink.click.stream.name: !Ref 'ClickStream'
            - PropertyGroupId: AggregationProperties
              PropertyMap:
                aggregation.bids.session.timeout: !Sub '${BidsSessionTimeout}'
                aggregation.clicks.session.timeout: !Sub '${ClicksSessionTimeout}'
                aggregation.period: !Sub '${AggregationPeriod}'
        FlinkApplicationConfiguration:
          CheckpointConfiguration:
            ConfigurationType: CUSTOM
            CheckpointingEnabled: true
            CheckpointInterval: 600000
            MinPauseBetweenCheckpoints: 60000
          ParallelismConfiguration:
            ConfigurationType: CUSTOM
            AutoScalingEnabled: true
            ParallelismPerKPU: 4
            Parallelism: 4
          MonitoringConfiguration:
            ConfigurationType: CUSTOM
            MetricsLevel: PARALLELISM
            LogLevel: INFO
        ApplicationSnapshotConfiguration:
          SnapshotsEnabled: false
  KinesisAnalyticsAppCloudWatchLoggingOption:
    Type: "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption"
    Properties:
      ApplicationName: !Ref KinesisAnalyticsApp
      CloudWatchLoggingOption:
        LogStreamARN:
          !Join
          - ':'
          - - 'arn:aws:logs'
            - !Ref AWS::Region
            - !Ref AWS::AccountId
            - 'log-group'
            - !Ref LogGroupKinesisAnalyticsApp
            - 'log-stream'
            - !Ref LogStreamKinesisAnalyticsApp
  LogGroupJsonNewLineAdderLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ServicePrefix}JsonNewLineAdder'
  JsonNewLineAdderLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-compaction/target/fds-lambda-compaction-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}JsonNewLineAdder'
      Handler: com.provectus.fds.compaction.JsonNewLineAdderLambda
      MemorySize: 128
      Timeout: 180
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: java8
  S3DeliveryAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${ServicePrefix}FirehoseS3AccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowAccessToS3Bucket
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Sid: JsonNewLineAdderAccess
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource:
                  - !GetAtt 'JsonNewLineAdderLambda.Arn'
              - Sid: glue
                Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetPartition
                  - glue:GetTables
                  - glue:GetPartitions
                  - glue:UpdateTable
                  - glue:CreatePartition
                  - glue:GetDatabases
                  - glue:UpdatePartition
                  - glue:GetTable
                Resource:
                  - '*'
  RawBcnsS3DeliveryStream:
    DependsOn:
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawBcnsS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'BcnStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/bcns/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  JsonNewLineAdderLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt 'JsonNewLineAdderLambda.Arn'
      Principal: firehose.amazonaws.com
      SourceArn: !GetAtt 'RawBcnsS3DeliveryStream.Arn'
  RawImpressionsS3DeliveryStream:
    DependsOn:
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawImpressionsS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'ImpressionStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/impressions/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  RawClicksS3DeliveryStream:
    DependsOn:
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawClicksS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'ClickStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/clicks/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  RawAggregatesS3DeliveryStream:
    DependsOn:
      - S3DeliveryAccessRole
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${ServicePrefix}RawAggrefatesS3DelieveryStream'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt 'AggregateStream.Arn'
        RoleARN: !GetAtt 'KinesisAnalyticsRole.Arn'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${S3BucketName}'
        BufferingHints:
          IntervalInSeconds: !Ref 'BufInterval'
          SizeInMBs: !Ref 'BufSize'
        CompressionFormat: GZIP
        Prefix: raw/aggregates/
        RoleARN: !GetAtt 'S3DeliveryAccessRole.Arn'
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt 'JsonNewLineAdderLambda.Arn'
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt 'S3DeliveryAccessRole.Arn'
              Type: Lambda
  AnalyticalDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: !Ref 'AnalyticalDBName'
        Description: Database to hold tables for fds data
  RawBcnsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_bcns
        Description: All input bcs in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/bcns/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
  RawImpressionsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_impressions
        Description: All input imps in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/impressions/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
  RawClicksGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_clicks
        Description: All input clicks in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/clicks/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
  RawAggregatesGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
      TableInput:
        Name: raw_aggregates
        Description: All input aggregates in json format
        TableType: EXTERNAL_TABLE
        Parameters:
          CrawlerSchemaDeserializerVersion: 1.0
          CrawlerSchemaSerializerVersion: 1.0
          classification: json
          compressionType: GZIP
          typeOfData: file
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/raw/aggregates/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: true
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          StoredAsSubDirectories: true
          Columns:
            - Name: campaign_item_id
              Type: bigint
            - Name: period
              Type: string
            - Name: bids
              Type: bigint
            - Name: imps
              Type: bigint
            - Name: clicks
              Type: bigint
  ParquetBcnsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input bcns in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/bcns/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
        Name: parquet_bcns
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  ParquetImpsGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input imps in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/impressions/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
        Name: parquet_impressions
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  ParquetClickGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input clicks in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/clicks/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: txid
              Type: string
            - Name: campaign_item_id
              Type: bigint
            - Name: domain
              Type: string
            - Name: creative_id
              Type: string
            - Name: appuid
              Type: string
            - Name: creative_category
              Type: string
            - Name: win_price
              Type: bigint
        Name: parquet_clicks
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  ParquetAggregatesGlueTable:
    DependsOn:
      - AnalyticalDatabase
    Type: AWS::Glue::Table
    Properties:
      TableInput:
        Description: All input aggregates in parquet format
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: year
            Type: int
          - Name: day
            Type: int
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/parquet/aggregates/'
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: 1
          StoredAsSubDirectories: false
          Columns:
            - Name: campaign_item_id
              Type: bigint
            - Name: period
              Type: string
            - Name: bids
              Type: bigint
            - Name: imps
              Type: bigint
            - Name: clicks
              Type: bigint
        Name: parquet_aggregates
      DatabaseName: !Ref 'AnalyticalDBName'
      CatalogId: !Ref 'AWS::AccountId'
  LogGroupJsonToParquetLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ServicePrefix}JsonToParquetConverter'
  JsonToParquetLambda:
    DependsOn:
      - S3DeliveryAccessRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-compaction/target/fds-lambda-compaction-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}JsonToParquetConverter'
      Environment:
        Variables:
          GLUE_CATALOG_ID: !Ref 'AWS::AccountId'
          GLUE_DATABASE_NAME: !Ref 'AnalyticalDBName'
      Handler: com.provectus.fds.compaction.JsonToParquetConverterLambda
      MemorySize: 512
      Timeout: 180
      Role: !GetAtt 'S3DeliveryAccessRole.Arn'
      Runtime: java8
  JsonToParquetLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt 'JsonToParquetLambda.Arn'
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${S3BucketName}'
  AggregationDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: campaign_item_id
          AttributeType: N
        - AttributeName: period
          AttributeType: N
      KeySchema:
        - AttributeName: campaign_item_id
          KeyType: HASH
        - AttributeName: period
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  KinesisToDynamoDbIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub '${ServicePrefix}KinesisPeristerAccessPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - kinesis:ListTagsForStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - dynamoDB:PutItem
                  - dynamoDB:UpdateItem
                  - dynamodb:BatchGetItem
                  - dynamoDB:Query
                  - dynamoDB:Scan
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt 'AggregateStream.Arn'
                  - !GetAtt 'AggregationDynamoTable.Arn'
  LogGroupKinesisToDynamoDbLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ServicePrefix}KinesisToDynamoDbPersister'
  KinesisToDynamoDbLambda:
    DependsOn:
      - KinesisToDynamoDbIAMRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-dynamodb-persister/target/fds-lambda-dynamodb-persister-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}KinesisToDynamoDbPersister'
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref 'AggregationDynamoTable'
      Handler: com.provectus.fds.dynamodb.DynamoDBPersisterLambda
      MemorySize: 256
      Timeout: 180
      Role: !GetAtt 'KinesisToDynamoDbIAMRole.Arn'
      Runtime: java8
  KinesisToDynamoDbConsumer:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt 'AggregateStream.Arn'
      FunctionName: !GetAtt 'KinesisToDynamoDbLambda.Arn'
      StartingPosition: TRIM_HORIZON
      Enabled: True
  ApiGatewayStage:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'Api'
      StageName: !Sub '${ServicePrefix}'
      StageDescription:
        AccessLogSetting:
          DestinationArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupApi}'
  # Reporting API
  ReportingApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ServicePrefix}ReportingApi'
      Description: API used for reporting requests
      FailOnWarnings: false
      Body:
        openapi: 3.0.0
        components:
          schemas:
            Aggregation:
              title: Aggregation
              type: object
              properties:
                campaign_item_id:
                  required: true
                  type: integer
                period:
                  type: integer
                clicks:
                  type: integer
                imps:
                  type: integer
                bids:
                  type: integer
        info:
          title: Reporting API
          version: '2016-03-31T18:25:32Z'
        paths:
          /reports/campaigns/{campaign_item_id}:
            get:
              parameters:
                - in: path
                  name: campaign_item_id
                  schema:
                    type: integer
                  required: true
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Aggregation'

              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                responses:
                  default:
                    statusCode: '200'
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReportingLambda.Arn}/invocations'
          /reports/campaigns/{campaign_item_id}/period:
            get:
              parameters:
                - in: path
                  name: campaign_item_id
                  schema:
                    type: integer
                  required: true
                - in: query
                  name: timezone
                  schema:
                    type: string
                - in: query
                  name: period
                  schema:
                    type: string
                - in: query
                  name: from
                  schema:
                    type: integer
                - in: query
                  name: to
                  schema:
                    type: integer
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/Aggregation'
              x-amazon-apigateway-integration:
                credentials: !GetAtt 'KinesisAnalyticsRole.Arn'
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                responses:
                  default:
                    statusCode: '200'
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReportingLambda.Arn}/invocations'
  ReportingLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./fds-lambda-reports/target/fds-lambda-reports-1.0-SNAPSHOT.jar
      FunctionName: !Sub '${ServicePrefix}ReportsHandler'
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref 'AggregationDynamoTable'
      Handler: com.provectus.fds.reports.ApiHandler
      MemorySize: 256
      Timeout: 180
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: java8
  ReportingApiGatewayStage:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'ReportingApi'
      StageName: !Sub '${ServicePrefix}'
      StageDescription:
        AccessLogSetting:
          DestinationArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupApi}'
Outputs:
  UrlForAPI:
    Description: Root URL of the API gateway
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ServicePrefix}'
  UrlForReports:
    Description: Root URL of the reports gateway
    Value: !Sub 'https://${ReportingApi}.execute-api.${AWS::Region}.amazonaws.com/${ServicePrefix}'